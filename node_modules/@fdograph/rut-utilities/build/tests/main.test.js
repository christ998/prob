"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const main_1 = require("../main");
describe('isRutLike', () => {
    it('Should validate Regex pattern for a rut-like string', () => {
        const validCases = [
            '9.999.999-9',
            '14355245-5',
            '34566754-k',
            '12.344.568-4',
            '32.456.356-k',
            '543.567-6',
        ];
        const invalidCases = [
            '23.432.432-t',
            'dfsg24rfr2f3-',
            '13.354322-g',
            '13424-2',
        ];
        validCases.forEach(rut => {
            expect(main_1.isRutLike(rut)).toEqual(true);
        });
        invalidCases.forEach(rut => {
            expect(main_1.isRutLike(rut)).toEqual(false);
        });
    });
});
describe('isSuspiciousRut', () => {
    it('Should validate Regex pattern for a suspicious-rut string', () => {
        const validCases = [
            '11.111.111-1',
            '2.222.222-k',
            '22222222',
        ];
        const invalidCases = [
            '18585543-0',
            '2s222t222-k',
            '23.432.432-t',
            'dfsg24rfr2f3-',
            '13.354322-g',
            '13424-2',
        ];
        validCases.forEach(rut => {
            expect(main_1.isSuspiciousRut(rut)).toEqual(true);
        });
        invalidCases.forEach(rut => {
            expect(main_1.isSuspiciousRut(rut)).toEqual(false);
        });
    });
});
describe('cleanRut', () => {
    it('Should clean a rut-like string or return an empty string', () => {
        expect(main_1.cleanRut('13.543.343-k')).toEqual('13543343k');
        expect(main_1.cleanRut('22456765-3')).toEqual('224567653');
        expect(main_1.cleanRut('11111111-1')).toEqual('111111111');
        expect(main_1.cleanRut('fnekcsnsdk')).toEqual('');
        expect(main_1.cleanRut('')).toEqual('');
        expect(main_1.cleanRut('35fdlp34/d')).toEqual('');
    });
});
describe('getRutDigits', () => {
    it('Should get the digits of rut-like string or an empty string', () => {
        expect(main_1.getRutDigits('13.543.343-k')).toEqual('13543343');
        expect(main_1.getRutDigits('fnekcsnsdk')).toEqual('');
    });
});
describe('getRutVerifier', () => {
    it('Should get the verifier of rut-like string or an empty string', () => {
        expect(main_1.getRutVerifier('13.543.343-k')).toEqual('k');
        expect(main_1.getRutVerifier('fnekcsnsdk')).toEqual('');
    });
});
describe('deconstructRut', () => {
    it('Should deconstruct a rut-like string and return an object', () => {
        const rut = '7775735-k';
        expect(main_1.deconstructRut(rut)).toEqual({
            digits: '7775735',
            verifier: 'k',
        });
    });
});
describe('calculateRutVerifier', () => {
    it('Should calculate the verifier for provided digits', () => {
        const tests = [
            ['7775735', 'k'],
            ['18585543', '0'],
            ['18348353', '6'],
        ];
        tests.forEach(([digits, expectedVerifier]) => {
            expect(main_1.calculateRutVerifier(digits)).toEqual(expectedVerifier);
        });
    });
});
describe('validateRut', () => {
    it('Should validate a rut-like string', () => {
        const validRuts = ['7775735-k', '18585543-0', '18348353-6'];
        const invalidRuts = ['', '9.999.999-9', '14355245-5', '34566754-k', '12.344.568-4', '32.456.356-k'];
        validRuts.forEach(test => {
            expect(main_1.validateRut(test)).toEqual(true);
        });
        invalidRuts.forEach(test => {
            expect(main_1.validateRut(test)).toEqual(false);
        });
    });
    it('Should skip suspicious-rut validation when toggling noSuspicious param', () => {
        const suspiciousValidRuts = ['11111111-1', '22222222-2', '99999999-9'];
        const suspiciousInvalidRuts = ['3333333-3', '2222222-k', ''];
        suspiciousValidRuts.forEach(rut => {
            const on = main_1.validateRut(rut);
            const off = main_1.validateRut(rut, false);
            expect(on).toEqual(false);
            expect(off).toEqual(true);
        });
        suspiciousInvalidRuts.forEach(rut => {
            const on = main_1.validateRut(rut, true);
            const off = main_1.validateRut(rut, false);
            expect(on).toEqual(false);
            expect(off).toEqual(false);
        });
    });
});
describe('validateRutList', () => {
    it('Should validate a list of rut-like strings', () => {
        const validRuts = ['7775735-k', '18585543-0', '18348353-6'];
        const validResult = main_1.validateRutList(validRuts);
        validRuts.forEach((r) => {
            expect(validResult.get(r)).toEqual(true);
        });
        const invalidRuts = ['', '9.999.999-9', '14355245-5', '34566754-k', '12.344.568-4', '32.456.356-k'];
        const invalidResult = main_1.validateRutList(invalidRuts);
        invalidRuts.forEach((r) => {
            expect(invalidResult.get(r)).toEqual(false);
        });
    });
});
describe('formatRut', () => {
    it('Should format a rut-like string or return it intact', () => {
        const longrutLikeStr = '44.333.222-1';
        const shortutLikeStr = '333.222-1';
        expect(main_1.formatRut(longrutLikeStr)).toEqual('44333222-1');
        expect(main_1.formatRut(longrutLikeStr, main_1.RutFormat.DASH)).toEqual('44333222-1');
        expect(main_1.formatRut(longrutLikeStr, main_1.RutFormat.DOTS_DASH)).toEqual('44.333.222-1');
        expect(main_1.formatRut(longrutLikeStr, main_1.RutFormat.DOTS)).toEqual('44.333.2221');
        expect(main_1.formatRut(longrutLikeStr, null)).toEqual('443332221');
        expect(main_1.formatRut(shortutLikeStr)).toEqual('333222-1');
        expect(main_1.formatRut(shortutLikeStr, main_1.RutFormat.DASH)).toEqual('333222-1');
        expect(main_1.formatRut(shortutLikeStr, main_1.RutFormat.DOTS_DASH)).toEqual('333.222-1');
        expect(main_1.formatRut(shortutLikeStr, main_1.RutFormat.DOTS)).toEqual('333.2221');
        expect(main_1.formatRut(shortutLikeStr, null)).toEqual('3332221');
        expect(main_1.formatRut('ne93jkdf39f-')).toEqual('ne93jkdf39f-');
        expect(main_1.formatRut('')).toEqual('');
    });
});
describe('generateRut', () => {
    it('Should generate valid Ruts', () => {
        let runs = 100;
        while (runs--) {
            expect(main_1.validateRut(main_1.generateRut())).toEqual(true);
        }
    });
});
//# sourceMappingURL=main.test.js.map