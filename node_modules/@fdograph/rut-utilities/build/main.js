"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateRut = exports.validateRutList = exports.validateRut = exports.calculateRutVerifier = exports.formatRut = exports.RutFormat = exports.deconstructRut = exports.getRutVerifier = exports.getRutDigits = exports.cleanRut = exports.isSuspiciousRut = exports.isRutLike = void 0;
const rutLikePattern = () => /^(\d{0,2})\.?(\d{3})\.?(\d{3})-?(\d|k)$/gi;
const suspiciousRutPattern = () => /^(\d)\1?\.?(\1{3})\.?(\1{3})-?(\d|k)?$/gi;
const isRutLike = (rut) => rutLikePattern().test(rut);
exports.isRutLike = isRutLike;
const isSuspiciousRut = (rut) => suspiciousRutPattern().test(rut);
exports.isSuspiciousRut = isSuspiciousRut;
const cleanRut = (rut) => exports.isRutLike(rut) ? rut.replace(/[^0-9k]/gi, '') : '';
exports.cleanRut = cleanRut;
const getRutDigits = (rut) => exports.cleanRut(rut).slice(0, -1);
exports.getRutDigits = getRutDigits;
const getRutVerifier = (rut) => exports.cleanRut(rut).slice(-1);
exports.getRutVerifier = getRutVerifier;
const deconstructRut = (rut) => ({
    digits: exports.getRutDigits(rut),
    verifier: exports.getRutVerifier(rut),
});
exports.deconstructRut = deconstructRut;
var RutFormat;
(function (RutFormat) {
    RutFormat[RutFormat["DOTS"] = 0] = "DOTS";
    RutFormat[RutFormat["DASH"] = 1] = "DASH";
    RutFormat[RutFormat["DOTS_DASH"] = 2] = "DOTS_DASH";
})(RutFormat = exports.RutFormat || (exports.RutFormat = {}));
const formatRut = (rut, format = RutFormat.DASH) => {
    if (!exports.isRutLike(rut))
        return rut;
    switch (format) {
        case RutFormat.DOTS:
            return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}${args[4]}`);
        case RutFormat.DASH:
            return rut.replace(rutLikePattern(), '$1$2$3-$4');
        case RutFormat.DOTS_DASH:
            return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}-${args[4]}`);
        default:
            return rut.replace(rutLikePattern(), '$1$2$3$4');
    }
};
exports.formatRut = formatRut;
const calculateRutVerifier = (digits) => {
    let sum = 0;
    let mul = 2;
    let i = digits.length;
    while (i--) {
        sum = sum + parseInt(digits.charAt(i)) * mul;
        if (mul % 7 === 0) {
            mul = 2;
        }
        else {
            mul++;
        }
    }
    const res = sum % 11;
    if (res === 0) {
        return '0';
    }
    else if (res === 1) {
        return 'k';
    }
    return `${(11 - res)}`;
};
exports.calculateRutVerifier = calculateRutVerifier;
const validateRut = (rut, noSuspicious = true) => {
    if (!exports.isRutLike(rut))
        return false;
    if (noSuspicious && exports.isSuspiciousRut(rut))
        return false;
    return exports.getRutVerifier(rut) === exports.calculateRutVerifier(exports.getRutDigits(rut));
};
exports.validateRut = validateRut;
const validateRutList = (ruts, noSuspicious = true) => {
    return ruts.reduce((result, rut) => {
        result.set(rut, exports.validateRut(rut, noSuspicious));
        return result;
    }, new Map());
};
exports.validateRutList = validateRutList;
const generateRut = () => {
    const digits = Math.floor(10000003 + Math.random() * 90000000).toString();
    const verifier = exports.calculateRutVerifier(digits);
    return exports.formatRut(digits + verifier);
};
exports.generateRut = generateRut;
//# sourceMappingURL=main.js.map