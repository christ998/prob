{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\src\\\\views\\\\pages\\\\components\\\\SimpleModal.jsx\";\n\nimport React, { useState, forwardRef, useImperativeHandle } from \"react\";\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nvar SimpleModal = forwardRef(function (props, ref) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      display = _useState2[0],\n      setDisplay = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      modalOptions = _useState4[0],\n      setModalOptions = _useState4[1];\n\n  useImperativeHandle(ref, function () {\n    return {\n      setModal: function setModal(options) {\n        return _setModal(options);\n      }\n    };\n  });\n\n  var _setModal = function _setModal(options) {\n    var state = false;\n\n    if (options === null || options === void 0 ? void 0 : options.title) {\n      state = true;\n    }\n\n    setModalOptions(options);\n    setDisplay(state);\n  };\n\n  if (display) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: display,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(ModalHeader, {\n      toggle: function toggle() {\n        return _setModal({});\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 21\n      }\n    }, modalOptions.title), /*#__PURE__*/React.createElement(ModalBody, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 21\n      }\n    }, modalOptions.text), /*#__PURE__*/React.createElement(ModalFooter, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }\n    }, modalOptions.type === 1 ? /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: function onClick() {\n        return _setModal({});\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 31\n      }\n    }, \"Cerrar\") : /*#__PURE__*/React.createElement(\"div\", {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 31\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      onClick: function onClick() {\n        return modalOptions.fx();\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 36\n      }\n    }, \"Confirmar\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      onClick: function onClick() {\n        return _setModal({});\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 117\n      }\n    }, \"Cancelar\")))));\n  }\n\n  ;\n  return null;\n});\nexport default SimpleModal;","map":{"version":3,"sources":["C:/Users/Christian/WebstormProjects/teleodontoweb/src/views/pages/components/SimpleModal.jsx"],"names":["React","useState","forwardRef","useImperativeHandle","Button","Modal","ModalHeader","ModalBody","ModalFooter","SimpleModal","props","ref","display","setDisplay","modalOptions","setModalOptions","setModal","options","state","title","text","type","fx"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,SAAQC,MAAR,EAAgBC,KAAhB,EAAuBC,WAAvB,EAAoCC,SAApC,EAA+CC,WAA/C,QAAiE,YAAjE;AAEA,IAAMC,WAAW,GAAGP,UAAU,CAAC,UAACQ,KAAD,EAAQC,GAAR,EAAgB;AAAA,kBACbV,QAAQ,CAAC,KAAD,CADK;AAAA;AAAA,MACpCW,OADoC;AAAA,MAC3BC,UAD2B;;AAAA,mBAEHZ,QAAQ,CAAC,EAAD,CAFL;AAAA;AAAA,MAEpCa,YAFoC;AAAA,MAEtBC,eAFsB;;AAI3CZ,EAAAA,mBAAmB,CAACQ,GAAD,EAAM,YAAM;AAC3B,WAAO;AACHK,MAAAA,QAAQ,EAAE,kBAACC,OAAD;AAAA,eAAaD,SAAQ,CAACC,OAAD,CAArB;AAAA;AADP,KAAP;AAGH,GAJkB,CAAnB;;AAMA,MAAMD,SAAQ,GAAG,SAAXA,SAAW,CAACC,OAAD,EAAa;AAC1B,QAAIC,KAAK,GAAG,KAAZ;;AACA,QAAID,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEE,KAAb,EAAoB;AAChBD,MAAAA,KAAK,GAAG,IAAR;AACH;;AACDH,IAAAA,eAAe,CAACE,OAAD,CAAf;AACAJ,IAAAA,UAAU,CAACK,KAAD,CAAV;AACH,GAPD;;AASA,MAAIN,OAAJ,EAAa;AACT,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AAAO,MAAA,MAAM,EAAEA,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,WAAD;AAAa,MAAA,MAAM,EAAE;AAAA,eAAMI,SAAQ,CAAC,EAAD,CAAd;AAAA,OAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKF,YAAY,CAACK,KADlB,CADJ,eAII,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKL,YAAY,CAACM,IADlB,CAJJ,eAOI,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKN,YAAY,CAACO,IAAb,KAAsB,CAAtB,gBACK,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,WAAd;AAA0B,MAAA,OAAO,EAAE;AAAA,eAAML,SAAQ,CAAC,EAAD,CAAd;AAAA,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADL,gBAEK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAK,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,SAAd;AAAwB,MAAA,OAAO,EAAE;AAAA,eAAMF,YAAY,CAACQ,EAAb,EAAN;AAAA,OAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAL,EAAkF,GAAlF,eAAsF,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAC,WAAd;AAA0B,MAAA,OAAO,EAAE;AAAA,eAAMN,SAAQ,CAAC,EAAD,CAAd;AAAA,OAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAtF,CAHV,CAPJ,CADJ,CADJ;AAkBH;;AAAA;AACD,SAAO,IAAP;AACH,CAxC6B,CAA9B;AA0CA,eAAeP,WAAf","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from \"react\";\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap'\r\n\r\nconst SimpleModal = forwardRef((props, ref) => {\r\n    const [display, setDisplay] = useState(false);\r\n    const [modalOptions, setModalOptions] = useState({});\r\n\r\n    useImperativeHandle(ref, () => {\r\n        return {\r\n            setModal: (options) => setModal(options)\r\n        }\r\n    });\r\n\r\n    const setModal = (options) => {\r\n        let state = false\r\n        if (options?.title) {\r\n            state = true;\r\n        }\r\n        setModalOptions(options);\r\n        setDisplay(state);\r\n    }\r\n\r\n    if (display) {\r\n        return (\r\n            <div>\r\n                <Modal isOpen={display}>\r\n                    <ModalHeader toggle={() => setModal({})}>\r\n                        {modalOptions.title}\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        {modalOptions.text}\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        {modalOptions.type === 1 \r\n                            ? <Button color=\"secondary\" onClick={() => setModal({})}>Cerrar</Button> \r\n                            : <div><Button color=\"primary\" onClick={() => modalOptions.fx()}>Confirmar</Button>{' '}<Button color=\"secondary\" onClick={() => setModal({})}>Cancelar</Button></div>\r\n                        }\r\n                    </ModalFooter>\r\n                </Modal> \r\n            </div>\r\n        );\r\n    };\r\n    return null;\r\n});\r\n\r\nexport default SimpleModal;"]},"metadata":{},"sourceType":"module"}