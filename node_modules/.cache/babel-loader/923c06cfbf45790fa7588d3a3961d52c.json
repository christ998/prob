{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generateRut = exports.validateRutList = exports.validateRut = exports.calculateRutVerifier = exports.formatRut = exports.RutFormat = exports.deconstructRut = exports.getRutVerifier = exports.getRutDigits = exports.cleanRut = exports.isSuspiciousRut = exports.isRutLike = void 0;\n\nvar rutLikePattern = function rutLikePattern() {\n  return /^(\\d{0,2})\\.?(\\d{3})\\.?(\\d{3})-?(\\d|k)$/gi;\n};\n\nvar suspiciousRutPattern = function suspiciousRutPattern() {\n  return /^(\\d)\\1?\\.?(\\1{3})\\.?(\\1{3})-?(\\d|k)?$/gi;\n};\n\nvar isRutLike = function isRutLike(rut) {\n  return rutLikePattern().test(rut);\n};\n\nexports.isRutLike = isRutLike;\n\nvar isSuspiciousRut = function isSuspiciousRut(rut) {\n  return suspiciousRutPattern().test(rut);\n};\n\nexports.isSuspiciousRut = isSuspiciousRut;\n\nvar cleanRut = function cleanRut(rut) {\n  return exports.isRutLike(rut) ? rut.replace(/[^0-9k]/gi, '') : '';\n};\n\nexports.cleanRut = cleanRut;\n\nvar getRutDigits = function getRutDigits(rut) {\n  return exports.cleanRut(rut).slice(0, -1);\n};\n\nexports.getRutDigits = getRutDigits;\n\nvar getRutVerifier = function getRutVerifier(rut) {\n  return exports.cleanRut(rut).slice(-1);\n};\n\nexports.getRutVerifier = getRutVerifier;\n\nvar deconstructRut = function deconstructRut(rut) {\n  return {\n    digits: exports.getRutDigits(rut),\n    verifier: exports.getRutVerifier(rut)\n  };\n};\n\nexports.deconstructRut = deconstructRut;\nvar RutFormat;\n\n(function (RutFormat) {\n  RutFormat[RutFormat[\"DOTS\"] = 0] = \"DOTS\";\n  RutFormat[RutFormat[\"DASH\"] = 1] = \"DASH\";\n  RutFormat[RutFormat[\"DOTS_DASH\"] = 2] = \"DOTS_DASH\";\n})(RutFormat = exports.RutFormat || (exports.RutFormat = {}));\n\nvar formatRut = function formatRut(rut) {\n  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RutFormat.DASH;\n  if (!exports.isRutLike(rut)) return rut;\n\n  switch (format) {\n    case RutFormat.DOTS:\n      return rut.replace(rutLikePattern(), function () {\n        return \"\".concat((arguments.length <= 1 ? undefined : arguments[1]) ? \"\".concat(arguments.length <= 1 ? undefined : arguments[1], \".\") : '').concat(arguments.length <= 2 ? undefined : arguments[2], \".\").concat(arguments.length <= 3 ? undefined : arguments[3]).concat(arguments.length <= 4 ? undefined : arguments[4]);\n      });\n\n    case RutFormat.DASH:\n      return rut.replace(rutLikePattern(), '$1$2$3-$4');\n\n    case RutFormat.DOTS_DASH:\n      return rut.replace(rutLikePattern(), function () {\n        return \"\".concat((arguments.length <= 1 ? undefined : arguments[1]) ? \"\".concat(arguments.length <= 1 ? undefined : arguments[1], \".\") : '').concat(arguments.length <= 2 ? undefined : arguments[2], \".\").concat(arguments.length <= 3 ? undefined : arguments[3], \"-\").concat(arguments.length <= 4 ? undefined : arguments[4]);\n      });\n\n    default:\n      return rut.replace(rutLikePattern(), '$1$2$3$4');\n  }\n};\n\nexports.formatRut = formatRut;\n\nvar calculateRutVerifier = function calculateRutVerifier(digits) {\n  var sum = 0;\n  var mul = 2;\n  var i = digits.length;\n\n  while (i--) {\n    sum = sum + parseInt(digits.charAt(i)) * mul;\n\n    if (mul % 7 === 0) {\n      mul = 2;\n    } else {\n      mul++;\n    }\n  }\n\n  var res = sum % 11;\n\n  if (res === 0) {\n    return '0';\n  } else if (res === 1) {\n    return 'k';\n  }\n\n  return \"\".concat(11 - res);\n};\n\nexports.calculateRutVerifier = calculateRutVerifier;\n\nvar validateRut = function validateRut(rut) {\n  var noSuspicious = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!exports.isRutLike(rut)) return false;\n  if (noSuspicious && exports.isSuspiciousRut(rut)) return false;\n  return exports.getRutVerifier(rut) === exports.calculateRutVerifier(exports.getRutDigits(rut));\n};\n\nexports.validateRut = validateRut;\n\nvar validateRutList = function validateRutList(ruts) {\n  var noSuspicious = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return ruts.reduce(function (result, rut) {\n    result.set(rut, exports.validateRut(rut, noSuspicious));\n    return result;\n  }, new Map());\n};\n\nexports.validateRutList = validateRutList;\n\nvar generateRut = function generateRut() {\n  var digits = Math.floor(10000003 + Math.random() * 90000000).toString();\n  var verifier = exports.calculateRutVerifier(digits);\n  return exports.formatRut(digits + verifier);\n};\n\nexports.generateRut = generateRut;","map":{"version":3,"sources":["../src/main.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateRut = exports.validateRutList = exports.validateRut = exports.calculateRutVerifier = exports.formatRut = exports.RutFormat = exports.deconstructRut = exports.getRutVerifier = exports.getRutDigits = exports.cleanRut = exports.isSuspiciousRut = exports.isRutLike = void 0;\nconst rutLikePattern = () => /^(\\d{0,2})\\.?(\\d{3})\\.?(\\d{3})-?(\\d|k)$/gi;\nconst suspiciousRutPattern = () => /^(\\d)\\1?\\.?(\\1{3})\\.?(\\1{3})-?(\\d|k)?$/gi;\nconst isRutLike = (rut) => rutLikePattern().test(rut);\nexports.isRutLike = isRutLike;\nconst isSuspiciousRut = (rut) => suspiciousRutPattern().test(rut);\nexports.isSuspiciousRut = isSuspiciousRut;\nconst cleanRut = (rut) => exports.isRutLike(rut) ? rut.replace(/[^0-9k]/gi, '') : '';\nexports.cleanRut = cleanRut;\nconst getRutDigits = (rut) => exports.cleanRut(rut).slice(0, -1);\nexports.getRutDigits = getRutDigits;\nconst getRutVerifier = (rut) => exports.cleanRut(rut).slice(-1);\nexports.getRutVerifier = getRutVerifier;\nconst deconstructRut = (rut) => ({\n    digits: exports.getRutDigits(rut),\n    verifier: exports.getRutVerifier(rut),\n});\nexports.deconstructRut = deconstructRut;\nvar RutFormat;\n(function (RutFormat) {\n    RutFormat[RutFormat[\"DOTS\"] = 0] = \"DOTS\";\n    RutFormat[RutFormat[\"DASH\"] = 1] = \"DASH\";\n    RutFormat[RutFormat[\"DOTS_DASH\"] = 2] = \"DOTS_DASH\";\n})(RutFormat = exports.RutFormat || (exports.RutFormat = {}));\nconst formatRut = (rut, format = RutFormat.DASH) => {\n    if (!exports.isRutLike(rut))\n        return rut;\n    switch (format) {\n        case RutFormat.DOTS:\n            return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}${args[4]}`);\n        case RutFormat.DASH:\n            return rut.replace(rutLikePattern(), '$1$2$3-$4');\n        case RutFormat.DOTS_DASH:\n            return rut.replace(rutLikePattern(), (...args) => `${args[1] ? `${args[1]}.` : ''}${args[2]}.${args[3]}-${args[4]}`);\n        default:\n            return rut.replace(rutLikePattern(), '$1$2$3$4');\n    }\n};\nexports.formatRut = formatRut;\nconst calculateRutVerifier = (digits) => {\n    let sum = 0;\n    let mul = 2;\n    let i = digits.length;\n    while (i--) {\n        sum = sum + parseInt(digits.charAt(i)) * mul;\n        if (mul % 7 === 0) {\n            mul = 2;\n        }\n        else {\n            mul++;\n        }\n    }\n    const res = sum % 11;\n    if (res === 0) {\n        return '0';\n    }\n    else if (res === 1) {\n        return 'k';\n    }\n    return `${(11 - res)}`;\n};\nexports.calculateRutVerifier = calculateRutVerifier;\nconst validateRut = (rut, noSuspicious = true) => {\n    if (!exports.isRutLike(rut))\n        return false;\n    if (noSuspicious && exports.isSuspiciousRut(rut))\n        return false;\n    return exports.getRutVerifier(rut) === exports.calculateRutVerifier(exports.getRutDigits(rut));\n};\nexports.validateRut = validateRut;\nconst validateRutList = (ruts, noSuspicious = true) => {\n    return ruts.reduce((result, rut) => {\n        result.set(rut, exports.validateRut(rut, noSuspicious));\n        return result;\n    }, new Map());\n};\nexports.validateRutList = validateRutList;\nconst generateRut = () => {\n    const digits = Math.floor(10000003 + Math.random() * 90000000).toString();\n    const verifier = exports.calculateRutVerifier(digits);\n    return exports.formatRut(digits + verifier);\n};\nexports.generateRut = generateRut;\n//# sourceMappingURL=main.js.map"]},"metadata":{},"sourceType":"script"}