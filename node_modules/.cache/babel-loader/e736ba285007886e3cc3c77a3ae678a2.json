{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport jwt_decode from 'jwt-decode';\nimport { Redirect } from 'react-router';\nimport Axios from \"axios\";\nimport galleta from 'js-cookie';\n\nvar AuthService = /*#__PURE__*/function () {\n  function AuthService() {\n    _classCallCheck(this, AuthService);\n\n    this.login = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(username, password) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Axios.post(process.env.REACT_APP_API_URL + \"session/login\", {\n                  username: username,\n                  password: password\n                }).then(function (res) {\n                  if (res.data.auth == true) {\n                    console.log(galleta.getJSON('user'));\n                    galleta.set('user', {\n                      'user': res.data\n                    }, {\n                      expires: 1 / 3\n                    });\n                    var name = jwt_decode(res.data.token).names;\n                    localStorage.setItem(\"name\", name);\n                  }\n\n                  return res.data;\n                });\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    this.getName = function () {\n      return localStorage.getItem(\"name\");\n    };\n  }\n\n  _createClass(AuthService, [{\n    key: \"logout\",\n    value: function () {\n      var _logout = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var logout;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                galleta.remove('user');\n                _context2.next = 3;\n                return Axios.post(process.env.REACT_APP_API_URL + \"session/logout\", {}, {\n                  withCredentials: true\n                });\n\n              case 3:\n                logout = _context2.sent;\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function logout() {\n        return _logout.apply(this, arguments);\n      }\n\n      return logout;\n    }()\n  }, {\n    key: \"isAuthenticated\",\n    value: function isAuthenticated() {\n      if (galleta.get('user')) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"getUserId\",\n    value: function getUserId() {\n      var token = localStorage.getItem(\"user\");\n\n      if (token) {\n        var decoded = jwt_decode(token);\n        return decoded.id;\n      }\n    }\n  }]);\n\n  return AuthService;\n}();\n\nexport default new AuthService();","map":{"version":3,"sources":["C:/Users/Christian/WebstormProjects/teleodontoweb/src/helpers/AuthHelper.js"],"names":["jwt_decode","Redirect","Axios","galleta","AuthService","login","username","password","post","process","env","REACT_APP_API_URL","then","res","data","auth","console","log","getJSON","set","expires","name","token","names","localStorage","setItem","getName","getItem","remove","withCredentials","logout","get","decoded","id"],"mappings":";;;;AAAA,OAAOA,UAAP,MAAuB,YAAvB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;;IAGMC,W;;;;SAEFC,K;0EAAQ,iBAAOC,QAAP,EAAiBC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACSL,KAAK,CAACM,IAAN,CAAWC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,eAA3C,EAA4D;AACrEL,kBAAAA,QAAQ,EAAEA,QAD2D;AAErEC,kBAAAA,QAAQ,EAAEA;AAF2D,iBAA5D,EAGVK,IAHU,CAGL,UAAAC,GAAG,EAAI;AACX,sBAAGA,GAAG,CAACC,IAAJ,CAASC,IAAT,IAAiB,IAApB,EAAyB;AACrBC,oBAAAA,OAAO,CAACC,GAAR,CAAYd,OAAO,CAACe,OAAR,CAAgB,MAAhB,CAAZ;AACAf,oBAAAA,OAAO,CAACgB,GAAR,CAAY,MAAZ,EAAoB;AAAC,8BAAON,GAAG,CAACC;AAAZ,qBAApB,EAAsC;AAACM,sBAAAA,OAAO,EAAC,IAAE;AAAX,qBAAtC;AACA,wBAAIC,IAAI,GAAGrB,UAAU,CAACa,GAAG,CAACC,IAAJ,CAASQ,KAAV,CAAV,CAA2BC,KAAtC;AACAC,oBAAAA,YAAY,CAACC,OAAb,CAAqB,MAArB,EAA6BJ,IAA7B;AACH;;AACD,yBAAOR,GAAG,CAACC,IAAX;AACH,iBAXY,CADT;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;SAmCRY,O,GAAU;AAAA,aAAMF,YAAY,CAACG,OAAb,CAAqB,MAArB,CAAN;AAAA,K;;;;;;;;;;;;AApBNxB,gBAAAA,OAAO,CAACyB,MAAR,CAAe,MAAf;;uBACqB1B,KAAK,CAACM,IAAN,CAAWC,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgC,gBAA3C,EAA4D,EAA5D,EAA+D;AAACkB,kBAAAA,eAAe,EAAC;AAAjB,iBAA/D,C;;;AAAfC,gBAAAA,M;;;;;;;;;;;;;;;;;;sCAGO;AACb,UAAI3B,OAAO,CAAC4B,GAAR,CAAY,MAAZ,CAAJ,EAAwB;AACpB,eAAO,IAAP;AACH,OAFD,MAEO;AACH,eAAO,KAAP;AACH;AACJ;;;gCAEU;AACP,UAAIT,KAAK,GAAGE,YAAY,CAACG,OAAb,CAAqB,MAArB,CAAZ;;AACA,UAAIL,KAAJ,EAAU;AACN,YAAIU,OAAO,GAAGhC,UAAU,CAACsB,KAAD,CAAxB;AACA,eAAOU,OAAO,CAACC,EAAf;AACH;AACJ;;;;;;AAOL,eAAe,IAAI7B,WAAJ,EAAf","sourcesContent":["import jwt_decode from 'jwt-decode';\r\nimport { Redirect } from 'react-router';\r\nimport Axios from \"axios\";\r\nimport galleta from 'js-cookie'\r\n\r\n\r\nclass AuthService {\r\n\r\n    login = async (username, password) => {\r\n        return await Axios.post(process.env.REACT_APP_API_URL + \"session/login\", {\r\n            username: username,\r\n            password: password\r\n        }).then(res => {\r\n            if(res.data.auth == true){\r\n                console.log(galleta.getJSON('user'))\r\n                galleta.set('user', {'user':res.data},{expires:1/3})\r\n                let name = jwt_decode(res.data.token).names\r\n                localStorage.setItem(\"name\", name)\r\n            }\r\n            return res.data\r\n        })\r\n    }\r\n    async logout(){\r\n        galleta.remove('user')\r\n        const logout = await Axios.post(process.env.REACT_APP_API_URL + \"session/logout\",{},{withCredentials:true})\r\n    }\r\n\r\n    isAuthenticated(){\r\n        if (galleta.get('user')){\r\n            return true\r\n        } else {\r\n            return false\r\n        }\r\n    }\r\n\r\n    getUserId(){\r\n        let token = localStorage.getItem(\"user\")\r\n        if (token){\r\n            let decoded = jwt_decode(token);\r\n            return decoded.id;\r\n        }\r\n    }\r\n\r\n    getName = () => localStorage.getItem(\"name\")\r\n\r\n}\r\n\r\n\r\nexport default new AuthService();"]},"metadata":{},"sourceType":"module"}