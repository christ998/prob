{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\src\\\\components\\\\Fantoma\\\\FantomaOdontogram.jsx\";\nimport React, { useRef, useState } from 'react';\nimport { useGLTF } from '@react-three/drei/useGLTF';\nimport * as THREE from 'three';\nexport default function Model(props) {\n  var _this = this;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      meshes = _useState2[0],\n      setMeshes = _useState2[1];\n\n  var group = useRef();\n\n  var _useGLTF = useGLTF('/mesh/fantoma.gltf'),\n      nodes = _useGLTF.nodes,\n      materials = _useGLTF.materials;\n\n  var nodos = {\n    nodes\n  };\n  return /*#__PURE__*/React.createElement(\"group\", Object.assign({\n    ref: group\n  }, props, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    material: materials.encia,\n    geometry: nodes.reb_alv_inf_papilas.geometry,\n    position: [-0.000799172383267432, -0.009652681648731232, 0.03410725295543671],\n    rotation: [1.8928228644193699, 0, 0],\n    scale: [0.2582273781299591, 0.2582273781299591, 0.2582273781299591],\n    \"material-opacity\": props.opacity,\n    \"material-transparent\": true,\n    \"material-side\": THREE.FrontSide,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"mesh\", {\n    material: materials.encia,\n    geometry: nodes.reb_alv_sup_papilas.geometry,\n    position: [0.000345383945386857, 0.025681160390377045, 0.050578609108924866],\n    rotation: [1.7410711657057512, 0, 0],\n    scale: [0.27773573994636536, 0.35650089383125305, 0.2803818881511688],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }), typeof props.teeths !== 'undefined' ? Object.keys(props.teeths).map(function (item, i) {\n    return function () {\n      switch (Object.entries(props.teeths)[i][1]) {\n        case 1:\n          /* return (console.log('Ausente')) */\n          break;\n\n        case 2:\n          return /*#__PURE__*/React.createElement(\"mesh\", {\n            key: i,\n            material: materials.esmalte,\n            geometry: nodes[item].geometry,\n            position: nodes[item].position,\n            rotation: nodes[item].rotation,\n            scale: nodes[item].scale,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 45\n            }\n          });\n\n        case 3:\n          return /*#__PURE__*/React.createElement(\"mesh\", {\n            key: i,\n            material: materials.esmalte,\n            geometry: nodes[item + 'DF'].geometry,\n            position: nodes[item + 'DF'].position,\n            rotation: nodes[item + 'DF'].rotation,\n            scale: nodes[item + 'DF'].scale,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 45\n            }\n          });\n\n        case 4:\n          return /*#__PURE__*/React.createElement(\"mesh\", {\n            key: i,\n            material: materials.esmalte,\n            geometry: nodes[item + 'RR'].geometry,\n            position: nodes[item + 'RR'].position,\n            rotation: nodes[item + 'RR'].rotation,\n            scale: nodes[item + 'RR'].scale,\n            __self: _this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 45\n            }\n          });\n\n        case 5:\n          return console.log('Implante');\n\n        default:\n          return console.log('Por default');\n      }\n    }();\n  }) : console.log(\"indefinido\"));\n}\nuseGLTF.preload('/mesh/fantoma.gltf');","map":{"version":3,"sources":["C:/Users/Christian/WebstormProjects/teleodontoweb/src/components/Fantoma/FantomaOdontogram.jsx"],"names":["React","useRef","useState","useGLTF","THREE","Model","props","meshes","setMeshes","group","nodes","materials","nodos","encia","reb_alv_inf_papilas","geometry","opacity","FrontSide","reb_alv_sup_papilas","teeths","Object","keys","map","item","i","entries","esmalte","position","rotation","scale","console","log","preload"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from 'react'\r\nimport { useGLTF } from '@react-three/drei/useGLTF'\r\nimport * as THREE from 'three'\r\n\r\nexport default function Model(props) {\r\n\r\n    const [meshes, setMeshes] = useState([])\r\n\r\n\r\n    const group = useRef()\r\n\r\n    const { nodes, materials } = useGLTF('/mesh/fantoma.gltf')\r\n\r\n\r\n    const nodos={nodes}\r\n    return (\r\n\r\n        <group ref={group} {...props}>\r\n\r\n            {/*\r\n            <mesh\r\n                material={materials.lengua_normal}\r\n                geometry={nodes.lengua_normal.geometry}\r\n                position={[-0.000008139821147779, -0.002079464495182037, 0.028254840523004532]}\r\n                rotation={[0.07953233935449347, 0, 0]}\r\n            />\r\n            <mesh\r\n                material={materials.mejillas}\r\n                geometry={nodes.mejillas.geometry}\r\n                position={[-0.000080880970926955, 0.011259406805038452, 0.029608502984046936]}\r\n                rotation={[0.5004097689342194, -0.001791890864640021, 1.566577833093736]}\r\n                scale={[0.02752080000936985, 0.02752080000936985, 0.02752080000936985]}  \r\n                material-side={THREE.BackSide}\r\n            />\r\n            */}\r\n            \r\n\r\n            <mesh\r\n                material={materials.encia}\r\n                geometry={nodes.reb_alv_inf_papilas.geometry}\r\n                position={[-0.000799172383267432, -0.009652681648731232, 0.03410725295543671]}\r\n                rotation={[1.8928228644193699, 0, 0]}\r\n                scale={[0.2582273781299591, 0.2582273781299591, 0.2582273781299591]}\r\n                material-opacity={props.opacity}\r\n                material-transparent={true}\r\n                material-side={THREE.FrontSide}\r\n            />\r\n            <mesh\r\n                material={materials.encia}\r\n                geometry={nodes.reb_alv_sup_papilas.geometry}\r\n                position={[0.000345383945386857, 0.025681160390377045, 0.050578609108924866]}\r\n                rotation={[1.7410711657057512, 0, 0]}\r\n                scale={[0.27773573994636536, 0.35650089383125305, 0.2803818881511688]}\r\n            />\r\n       \r\n        {\r\n                typeof props.teeths  !== 'undefined' ? (\r\n\r\n                    Object.keys(props.teeths).map((item, i) => (                        \r\n                              (() => {\r\n                                switch (Object.entries(props.teeths)[i][1]) {\r\n                     \r\n                                    case 1:\r\n                                        /* return (console.log('Ausente')) */\r\n                                        break;\r\n                                      case 2:\r\n                                        return (\r\n                                            <mesh\r\n                                                key={i}\r\n                                                material={materials.esmalte}\r\n                                                geometry={nodes[item].geometry}\r\n                                                position={nodes[item].position}\r\n                                                rotation={nodes[item].rotation}\r\n                                                scale={nodes[item].scale}\r\n                                            />\r\n                                        )\r\n                                        \r\n                                      case 3:\r\n                                        return (\r\n                                            <mesh\r\n                                                key={i}\r\n                                                material={materials.esmalte}\r\n                                                geometry={nodes[item+'DF'].geometry}\r\n                                                position={nodes[item+'DF'].position}\r\n                                                rotation={nodes[item+'DF'].rotation}\r\n                                                scale={nodes[item+'DF'].scale}\r\n                                            />\r\n                                        )\r\n                                        \r\n                                      case 4:\r\n                                        return (\r\n                                            <mesh\r\n                                                key={i}\r\n                                                material={materials.esmalte}\r\n                                                geometry={nodes[item+'RR'].geometry}\r\n                                                position={nodes[item+'RR'].position}\r\n                                                rotation={nodes[item+'RR'].rotation}\r\n                                                scale={nodes[item+'RR'].scale}\r\n                                            />\r\n                                        )\r\n                                   \r\n                                      case 5:\r\n                                        return (console.log('Implante'))\r\n                                       \r\n                                      default:\r\n                                        return (console.log('Por default'))\r\n                     \r\n                                }\r\n                             })()\r\n                    )\r\n\r\n                ) ): (console.log(\"indefinido\"))\r\n        }  \r\n        </group>\r\n    )\r\n\r\n}\r\n\r\nuseGLTF.preload('/mesh/fantoma.gltf')\r\n"]},"metadata":{},"sourceType":"module"}