{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\";\n\n/*!\r\n\r\n=========================================================\r\n* Argon Dashboard PRO React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-pro-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\nimport React from \"react\"; // react library for routing\n\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\"; // nodejs library that concatenates classes\n\nimport classnames from \"classnames\"; // nodejs library to set properties for components\n\nimport { PropTypes } from \"prop-types\";\nimport galleta from \"js-cookie\";\nimport AuthHelper from \"../../helpers/AuthHelper\"; // react library that creates nice scrollbar on windows devices\n\nimport PerfectScrollbar from \"react-perfect-scrollbar\"; // reactstrap components\n\nimport { Collapse, NavbarBrand, Navbar, NavItem, NavLink, Nav } from \"reactstrap\";\n\nvar Sidebar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  var _super = _createSuper(Sidebar);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _super.call(this, props);\n\n    _this.activeRoute = function (routeName) {\n      return _this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n    };\n\n    _this.onMouseEnterSidenav = function () {\n      if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\n        document.body.classList.add(\"g-sidenav-show\");\n      }\n    };\n\n    _this.onMouseLeaveSidenav = function () {\n      if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\n        document.body.classList.remove(\"g-sidenav-show\");\n      }\n    };\n\n    _this.toggleCollapse = function () {\n      _this.setState({\n        collapseOpen: !_this.state.collapseOpen\n      });\n    };\n\n    _this.closeCollapse = function () {\n      _this.setState({\n        collapseOpen: false\n      });\n    };\n\n    _this.getCollapseStates = function (routes) {\n      var initialState = {};\n      routes.map(function (prop, key) {\n        if (prop.collapse) {\n          initialState = _objectSpread(_objectSpread({\n            [prop.state]: _this.getCollapseInitialState(prop.views)\n          }, _this.getCollapseStates(prop.views)), initialState);\n        }\n\n        return null;\n      });\n      return initialState;\n    };\n\n    _this.closeSidenav = function () {\n      if (window.innerWidth < 1200) {\n        _this.props.toggleSidenav();\n      }\n    };\n\n    _this.createLinks = function (routes) {\n      return routes.map(function (prop, key) {\n        if (prop.isAdmin && AuthHelper.isAuthenticated() && galleta.getJSON('user').user) {}\n\n        if (prop.redirect) {\n          return null;\n        }\n\n        if (prop.collapse) {\n          var st = {};\n          st[prop[\"state\"]] = !_this.state[prop.state];\n          return /*#__PURE__*/React.createElement(NavItem, {\n            key: key,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(NavLink, {\n            href: \"#pablo\",\n            \"data-toggle\": \"collapse\",\n            \"aria-expanded\": _this.state[prop.state],\n            className: classnames({\n              active: _this.getCollapseInitialState(prop.views)\n            }),\n            onClick: function onClick(e) {\n              e.preventDefault();\n\n              _this.setState(st);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 13\n            }\n          }, prop.icon ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"i\", {\n            className: prop.icon,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"nav-link-text\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 19\n            }\n          }, prop.name)) : prop.miniName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"sidenav-mini-icon\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 19\n            }\n          }, \" \", prop.miniName, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"sidenav-normal\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 19\n            }\n          }, \" \", prop.name, \" \")) : null), /*#__PURE__*/React.createElement(Collapse, {\n            isOpen: _this.state[prop.state],\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 13\n            }\n          }, /*#__PURE__*/React.createElement(Nav, {\n            className: \"nav-sm flex-column\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 15\n            }\n          }, _this.createLinks(prop.views))));\n        }\n\n        return /*#__PURE__*/React.createElement(NavItem, {\n          className: _this.activeRoute(prop.layout + prop.path),\n          key: key,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(NavLink, {\n          to: prop.layout + prop.path,\n          activeClassName: \"\",\n          onClick: _this.closeSidenav,\n          tag: NavLinkRRD,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161,\n            columnNumber: 11\n          }\n        }, prop.icon !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"i\", {\n          className: prop.icon,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 17\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"nav-link-text\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 17\n          }\n        }, prop.name)) : prop.miniName !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"sidenav-mini-icon\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 17\n          }\n        }, \" \", prop.miniName, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"sidenav-normal\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 17\n          }\n        }, \" \", prop.name, \" \")) : prop.name));\n      });\n    };\n\n    _this.state = _objectSpread({\n      collapseOpen: false\n    }, _this.getCollapseStates(props.routes));\n    return _this;\n  } // verifies if routeName is the one active (in browser input)\n\n\n  _createClass(Sidebar, [{\n    key: \"getCollapseInitialState\",\n    // this verifies if any of the collapses should be default opened on a rerender of this component\n    // for example, on the refresh of the page,\n    // while on the src/views/forms/RegularForms.js - route /admin/regular-forms\n    value: function getCollapseInitialState(routes) {\n      for (var i = 0; i < routes.length; i++) {\n        if (routes[i].collapse && this.getCollapseInitialState(routes[i].views)) {\n          return true;\n        } else if (window.location.href.indexOf(routes[i].path) !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    } // this is used on mobile devices, when a user navigates\n    // the sidebar will autoclose\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          routes = _this$props.routes,\n          logo = _this$props.logo;\n      var scrollBarInner = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scrollbar-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sidenav-header d-flex align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }\n      }, logo ? /*#__PURE__*/React.createElement(NavbarBrand, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        alt: logo.imgAlt,\n        className: \"navbar-brand-img\",\n        src: logo.imgSrc,\n        style: {\n          maxHeight: \"7rem\",\n          marginTop: \"2rem\",\n          marginLeft: \"1rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 15\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(\"sidenav-toggler d-none d-xl-block\", {\n          active: this.props.sidenavOpen\n        }),\n        onClick: this.props.toggleSidenav,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sidenav-toggler-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 17\n        }\n      }))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Collapse, {\n        navbar: true,\n        isOpen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Nav, {\n        navbar: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }\n      }, this.createLinks(routes)))));\n      return /*#__PURE__*/React.createElement(Navbar, {\n        className: \"sidenav navbar-vertical navbar-expand-xs navbar-light bg-white \" + (this.props.rtlActive ? \"\" : \"fixed-left\"),\n        onMouseEnter: this.onMouseEnterSidenav,\n        onMouseLeave: this.onMouseLeaveSidenav,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 7\n        }\n      }, navigator.platform.indexOf(\"Win\") > -1 ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }\n      }, scrollBarInner) : scrollBarInner);\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nSidebar.defaultProps = {\n  routes: [{}],\n  toggleSidenav: function toggleSidenav() {},\n  sidenavOpen: false,\n  rtlActive: false\n};\nSidebar.propTypes = {\n  // function used to make sidenav mini or normal\n  toggleSidenav: PropTypes.func,\n  // prop to know if the sidenav is mini or normal\n  sidenavOpen: PropTypes.bool,\n  // links that will be displayed inside the component\n  routes: PropTypes.arrayOf(PropTypes.object),\n  // logo\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the image src of the logo\n    imgSrc: PropTypes.string.isRequired,\n    // the alt for the img\n    imgAlt: PropTypes.string.isRequired\n  }),\n  // rtl active, this will make the sidebar to stay on the right side\n  rtlActive: PropTypes.bool\n};\nexport default Sidebar;","map":{"version":3,"sources":["C:/Users/Christian/WebstormProjects/teleodontoweb/src/components/Sidebar/Sidebar.js"],"names":["React","NavLink","NavLinkRRD","Link","classnames","PropTypes","galleta","AuthHelper","PerfectScrollbar","Collapse","NavbarBrand","Navbar","NavItem","Nav","Sidebar","props","activeRoute","routeName","location","pathname","indexOf","onMouseEnterSidenav","document","body","classList","contains","add","onMouseLeaveSidenav","remove","toggleCollapse","setState","collapseOpen","state","closeCollapse","getCollapseStates","routes","initialState","map","prop","key","collapse","getCollapseInitialState","views","closeSidenav","window","innerWidth","toggleSidenav","createLinks","isAdmin","isAuthenticated","getJSON","user","redirect","st","active","e","preventDefault","icon","name","miniName","layout","path","undefined","i","length","href","logo","scrollBarInner","imgAlt","imgSrc","maxHeight","marginTop","marginLeft","sidenavOpen","rtlActive","navigator","platform","Component","defaultProps","propTypes","func","bool","arrayOf","object","shape","innerLink","string","outterLink","isRequired"],"mappings":"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","sourcesContent":["/*!\r\n\r\n=========================================================\r\n* Argon Dashboard PRO React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-pro-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\n// react library for routing\r\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\r\n// nodejs library that concatenates classes\r\nimport classnames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\nimport galleta from \"js-cookie\"\r\nimport AuthHelper from \"../../helpers/AuthHelper\";\r\n// react library that creates nice scrollbar on windows devices\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n// reactstrap components\r\nimport {\r\n  Collapse,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavItem,\r\n  NavLink,\r\n  Nav\r\n} from \"reactstrap\";\r\n\r\nclass Sidebar extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      collapseOpen: false,\r\n      ...this.getCollapseStates(props.routes)\r\n    };\r\n  }\r\n  // verifies if routeName is the one active (in browser input)\r\n  activeRoute = routeName => {\r\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n  };\r\n  // makes the sidenav normal on hover (actually when mouse enters on it)\r\n  onMouseEnterSidenav = () => {\r\n    if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\r\n      document.body.classList.add(\"g-sidenav-show\");\r\n    }\r\n  };\r\n  // makes the sidenav mini on hover (actually when mouse leaves from it)\r\n  onMouseLeaveSidenav = () => {\r\n    if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\r\n      document.body.classList.remove(\"g-sidenav-show\");\r\n    }\r\n  };\r\n  // toggles collapse between opened and closed (true/false)\r\n  toggleCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: !this.state.collapseOpen\r\n    });\r\n  };\r\n  // closes the collapse\r\n  closeCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: false\r\n    });\r\n  };\r\n  // this creates the intial state of this component based on the collapse routes\r\n  // that it gets through this.props.routes\r\n  getCollapseStates = routes => {\r\n    let initialState = {};\r\n    routes.map((prop, key) => {\r\n      if (prop.collapse) {\r\n        initialState = {\r\n          [prop.state]: this.getCollapseInitialState(prop.views),\r\n          ...this.getCollapseStates(prop.views),\r\n          ...initialState\r\n        };\r\n      }\r\n      return null;\r\n    });\r\n    return initialState;\r\n  };\r\n  // this verifies if any of the collapses should be default opened on a rerender of this component\r\n  // for example, on the refresh of the page,\r\n  // while on the src/views/forms/RegularForms.js - route /admin/regular-forms\r\n  getCollapseInitialState(routes) {\r\n    for (let i = 0; i < routes.length; i++) {\r\n      if (routes[i].collapse && this.getCollapseInitialState(routes[i].views)) {\r\n        return true;\r\n      } else if (window.location.href.indexOf(routes[i].path) !== -1) {\r\n        return true;\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n  // this is used on mobile devices, when a user navigates\r\n  // the sidebar will autoclose\r\n  closeSidenav = () => {\r\n    if (window.innerWidth < 1200) {\r\n      this.props.toggleSidenav();\r\n    }\r\n  };\r\n  // this function creates the links and collapses that appear in the sidebar (left menu)\r\n  createLinks = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.isAdmin && AuthHelper.isAuthenticated() && galleta.getJSON('user').user){\r\n\r\n      }\r\n      if (prop.redirect) {\r\n        return null;\r\n      }\r\n      if (prop.collapse) {\r\n        var st = {};\r\n        st[prop[\"state\"]] = !this.state[prop.state];\r\n        return (\r\n          <NavItem key={key}>\r\n            <NavLink\r\n              href=\"#pablo\"\r\n              data-toggle=\"collapse\"\r\n              aria-expanded={this.state[prop.state]}\r\n              className={classnames({\r\n                active: this.getCollapseInitialState(prop.views)\r\n              })}\r\n              onClick={e => {\r\n                e.preventDefault();\r\n                this.setState(st);\r\n              }}\r\n            >\r\n              {prop.icon ? (\r\n                <>\r\n                  <i className={prop.icon} />\r\n                  <span className=\"nav-link-text\">{prop.name}</span>\r\n                </>\r\n              ) : prop.miniName ? (\r\n                <>\r\n                  <span className=\"sidenav-mini-icon\"> {prop.miniName} </span>\r\n                  <span className=\"sidenav-normal\"> {prop.name} </span>\r\n                </>\r\n              ) : null}\r\n            </NavLink>\r\n            <Collapse isOpen={this.state[prop.state]}>\r\n              <Nav className=\"nav-sm flex-column\">\r\n                {this.createLinks(prop.views)}\r\n              </Nav>\r\n            </Collapse>\r\n          </NavItem>\r\n        );\r\n      }\r\n      return (\r\n        <NavItem\r\n          className={this.activeRoute(prop.layout + prop.path)}\r\n          key={key}\r\n        >\r\n          <NavLink\r\n            to={prop.layout + prop.path}\r\n            activeClassName=\"\"\r\n            onClick={this.closeSidenav}\r\n            tag={NavLinkRRD}\r\n          >\r\n            {prop.icon !== undefined ? (\r\n              <>\r\n                <i className={prop.icon} />\r\n                <span className=\"nav-link-text\">{prop.name}</span>\r\n              </>\r\n            ) : prop.miniName !== undefined ? (\r\n              <>\r\n                <span className=\"sidenav-mini-icon\"> {prop.miniName} </span>\r\n                <span className=\"sidenav-normal\"> {prop.name} </span>\r\n              </>\r\n            ) : (\r\n              prop.name\r\n            )}\r\n          </NavLink>\r\n        </NavItem>\r\n      );\r\n    });\r\n  };\r\n  render() {\r\n    const { routes, logo } = this.props;\r\n    const scrollBarInner = (\r\n      <div className=\"scrollbar-inner\">\r\n        <div className=\"sidenav-header d-flex align-items-center\">\r\n          {logo ? (\r\n            <NavbarBrand>\r\n              <img\r\n                alt={logo.imgAlt}\r\n                className=\"navbar-brand-img\"\r\n                src={logo.imgSrc}\r\n                style={{maxHeight:\"7rem\", marginTop:\"2rem\", marginLeft:\"1rem\"}}\r\n              />\r\n            </NavbarBrand>\r\n          ) : null}\r\n          <div className=\"ml-auto\">\r\n            <div\r\n              className={classnames(\"sidenav-toggler d-none d-xl-block\", {\r\n                active: this.props.sidenavOpen\r\n              })}\r\n              onClick={this.props.toggleSidenav}\r\n            >\r\n              <div className=\"sidenav-toggler-inner\">\r\n                <i className=\"sidenav-toggler-line\" />\r\n                <i className=\"sidenav-toggler-line\" />\r\n                <i className=\"sidenav-toggler-line\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"navbar-inner\">\r\n          <Collapse navbar isOpen={true}>\r\n            <Nav navbar>{this.createLinks(routes)}</Nav>\r\n          </Collapse>\r\n        </div>\r\n      </div>\r\n    );\r\n    return (\r\n      <Navbar\r\n        className={\r\n          \"sidenav navbar-vertical navbar-expand-xs navbar-light bg-white \" +\r\n          (this.props.rtlActive ? \"\" : \"fixed-left\")\r\n        }\r\n        onMouseEnter={this.onMouseEnterSidenav}\r\n        onMouseLeave={this.onMouseLeaveSidenav}\r\n      >\r\n        {navigator.platform.indexOf(\"Win\") > -1 ? (\r\n          <PerfectScrollbar>{scrollBarInner}</PerfectScrollbar>\r\n        ) : (\r\n          scrollBarInner\r\n        )}\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  routes: [{}],\r\n  toggleSidenav: () => {},\r\n  sidenavOpen: false,\r\n  rtlActive: false\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // function used to make sidenav mini or normal\r\n  toggleSidenav: PropTypes.func,\r\n  // prop to know if the sidenav is mini or normal\r\n  sidenavOpen: PropTypes.bool,\r\n  // links that will be displayed inside the component\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  // logo\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string.isRequired,\r\n    // the alt for the img\r\n    imgAlt: PropTypes.string.isRequired\r\n  }),\r\n  // rtl active, this will make the sidebar to stay on the right side\r\n  rtlActive: PropTypes.bool\r\n};\r\n\r\nexport default Sidebar;\r\n"]},"metadata":{},"sourceType":"module"}