{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"C:\\\\Users\\\\Christian\\\\WebstormProjects\\\\teleodontoweb\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\";\n\n/*!\r\n\r\n=========================================================\r\n* Argon Dashboard PRO React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-pro-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\nimport React from \"react\"; // react library for routing\n\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\"; // nodejs library that concatenates classes\n\nimport classnames from \"classnames\"; // nodejs library to set properties for components\n\nimport { PropTypes } from \"prop-types\";\nimport galleta from \"js-cookie\";\nimport AuthHelper from \"../../helpers/AuthHelper\"; // react library that creates nice scrollbar on windows devices\n\nimport PerfectScrollbar from \"react-perfect-scrollbar\"; // reactstrap components\n\nimport { Collapse, NavbarBrand, Navbar, NavItem, NavLink, Nav } from \"reactstrap\";\n\nvar Sidebar = /*#__PURE__*/function (_React$Component) {\n  _inherits(Sidebar, _React$Component);\n\n  var _super = _createSuper(Sidebar);\n\n  function Sidebar(props) {\n    var _this;\n\n    _classCallCheck(this, Sidebar);\n\n    _this = _super.call(this, props);\n\n    _this.activeRoute = function (routeName) {\n      return _this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\n    };\n\n    _this.onMouseEnterSidenav = function () {\n      if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\n        document.body.classList.add(\"g-sidenav-show\");\n      }\n    };\n\n    _this.onMouseLeaveSidenav = function () {\n      if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\n        document.body.classList.remove(\"g-sidenav-show\");\n      }\n    };\n\n    _this.toggleCollapse = function () {\n      _this.setState({\n        collapseOpen: !_this.state.collapseOpen\n      });\n    };\n\n    _this.closeCollapse = function () {\n      _this.setState({\n        collapseOpen: false\n      });\n    };\n\n    _this.getCollapseStates = function (routes) {\n      var initialState = {};\n      routes.map(function (prop, key) {\n        if (prop.collapse) {\n          initialState = _objectSpread(_objectSpread({\n            [prop.state]: _this.getCollapseInitialState(prop.views)\n          }, _this.getCollapseStates(prop.views)), initialState);\n        }\n\n        return null;\n      });\n      return initialState;\n    };\n\n    _this.closeSidenav = function () {\n      if (window.innerWidth < 1200) {\n        _this.props.toggleSidenav();\n      }\n    };\n\n    _this.createLinks = function (routes) {\n      return routes.map(function (prop, key) {\n        if (prop.redirect) {\n          return null;\n        }\n\n        if (prop.collapse) {\n          if (prop.isAdmin && AuthHelper.isAuthenticated() && galleta.getJSON('user').result.user_type_id === 3) {}\n\n          var st = {};\n          st[prop[\"state\"]] = !_this.state[prop.state];\n          return /*#__PURE__*/React.createElement(NavItem, {\n            key: key,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 21\n            }\n          }, /*#__PURE__*/React.createElement(NavLink, {\n            href: \"#pablo\",\n            \"data-toggle\": \"collapse\",\n            \"aria-expanded\": _this.state[prop.state],\n            className: classnames({\n              active: _this.getCollapseInitialState(prop.views)\n            }),\n            onClick: function onClick(e) {\n              e.preventDefault();\n\n              _this.setState(st);\n            },\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 25\n            }\n          }, prop.icon ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"i\", {\n            className: prop.icon,\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 37\n            }\n          }), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"nav-link-text\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 142,\n              columnNumber: 37\n            }\n          }, prop.name)) : prop.miniName ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"sidenav-mini-icon\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 37\n            }\n          }, \" \", prop.miniName, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n            className: \"sidenav-normal\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 37\n            }\n          }, \" \", prop.name, \" \")) : null), /*#__PURE__*/React.createElement(Collapse, {\n            isOpen: _this.state[prop.state],\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 25\n            }\n          }, /*#__PURE__*/React.createElement(Nav, {\n            className: \"nav-sm flex-column\",\n            __self: _assertThisInitialized(_this),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 29\n            }\n          }, _this.createLinks(prop.views))));\n        }\n\n        return /*#__PURE__*/React.createElement(NavItem, {\n          className: _this.activeRoute(prop.layout + prop.path),\n          key: key,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 17\n          }\n        }, /*#__PURE__*/React.createElement(NavLink, {\n          to: prop.layout + prop.path,\n          activeClassName: \"\",\n          onClick: _this.closeSidenav,\n          tag: NavLinkRRD,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 21\n          }\n        }, prop.icon !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"i\", {\n          className: prop.icon,\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 33\n          }\n        }), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"nav-link-text\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 33\n          }\n        }, prop.name)) : prop.miniName !== undefined ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"span\", {\n          className: \"sidenav-mini-icon\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 33\n          }\n        }, \" \", prop.miniName, \" \"), /*#__PURE__*/React.createElement(\"span\", {\n          className: \"sidenav-normal\",\n          __self: _assertThisInitialized(_this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 33\n          }\n        }, \" \", prop.name, \" \")) : prop.name));\n      });\n    };\n\n    _this.state = _objectSpread({\n      collapseOpen: false\n    }, _this.getCollapseStates(props.routes));\n    return _this;\n  } // verifies if routeName is the one active (in browser input)\n\n\n  _createClass(Sidebar, [{\n    key: \"getCollapseInitialState\",\n    // this verifies if any of the collapses should be default opened on a rerender of this component\n    // for example, on the refresh of the page,\n    // while on the src/views/forms/RegularForms.js - route /admin/regular-forms\n    value: function getCollapseInitialState(routes) {\n      for (var i = 0; i < routes.length; i++) {\n        if (routes[i].collapse && this.getCollapseInitialState(routes[i].views)) {\n          return true;\n        } else if (window.location.href.indexOf(routes[i].path) !== -1) {\n          return true;\n        }\n      }\n\n      return false;\n    } // this is used on mobile devices, when a user navigates\n    // the sidebar will autoclose\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          routes = _this$props.routes,\n          logo = _this$props.logo;\n      var scrollBarInner = /*#__PURE__*/React.createElement(\"div\", {\n        className: \"scrollbar-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sidenav-header d-flex align-items-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 17\n        }\n      }, logo ? /*#__PURE__*/React.createElement(NavbarBrand, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        alt: logo.imgAlt,\n        className: \"navbar-brand-img\",\n        src: logo.imgSrc,\n        style: {\n          maxHeight: \"7rem\",\n          marginTop: \"2rem\",\n          marginLeft: \"1rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }\n      })) : null, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: classnames(\"sidenav-toggler d-none d-xl-block\", {\n          active: this.props.sidenavOpen\n        }),\n        onClick: this.props.toggleSidenav,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"sidenav-toggler-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 33\n        }\n      }), /*#__PURE__*/React.createElement(\"i\", {\n        className: \"sidenav-toggler-line\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 33\n        }\n      }))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"navbar-inner\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Collapse, {\n        navbar: true,\n        isOpen: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Nav, {\n        navbar: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 25\n        }\n      }, this.createLinks(routes)))));\n      return /*#__PURE__*/React.createElement(Navbar, {\n        className: \"sidenav navbar-vertical navbar-expand-xs navbar-light bg-white \" + (this.props.rtlActive ? \"\" : \"fixed-left\"),\n        onMouseEnter: this.onMouseEnterSidenav,\n        onMouseLeave: this.onMouseLeaveSidenav,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }\n      }, navigator.platform.indexOf(\"Win\") > -1 ? /*#__PURE__*/React.createElement(PerfectScrollbar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 21\n        }\n      }, scrollBarInner) : scrollBarInner);\n    }\n  }]);\n\n  return Sidebar;\n}(React.Component);\n\nSidebar.defaultProps = {\n  routes: [{}],\n  toggleSidenav: function toggleSidenav() {},\n  sidenavOpen: false,\n  rtlActive: false\n};\nSidebar.propTypes = {\n  // function used to make sidenav mini or normal\n  toggleSidenav: PropTypes.func,\n  // prop to know if the sidenav is mini or normal\n  sidenavOpen: PropTypes.bool,\n  // links that will be displayed inside the component\n  routes: PropTypes.arrayOf(PropTypes.object),\n  // logo\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the image src of the logo\n    imgSrc: PropTypes.string.isRequired,\n    // the alt for the img\n    imgAlt: PropTypes.string.isRequired\n  }),\n  // rtl active, this will make the sidebar to stay on the right side\n  rtlActive: PropTypes.bool\n};\nexport default Sidebar;","map":{"version":3,"sources":["C:/Users/Christian/WebstormProjects/teleodontoweb/src/components/Sidebar/Sidebar.js"],"names":["React","NavLink","NavLinkRRD","Link","classnames","PropTypes","galleta","AuthHelper","PerfectScrollbar","Collapse","NavbarBrand","Navbar","NavItem","Nav","Sidebar","props","activeRoute","routeName","location","pathname","indexOf","onMouseEnterSidenav","document","body","classList","contains","add","onMouseLeaveSidenav","remove","toggleCollapse","setState","collapseOpen","state","closeCollapse","getCollapseStates","routes","initialState","map","prop","key","collapse","getCollapseInitialState","views","closeSidenav","window","innerWidth","toggleSidenav","createLinks","redirect","isAdmin","isAuthenticated","getJSON","result","user_type_id","st","active","e","preventDefault","icon","name","miniName","layout","path","undefined","i","length","href","logo","scrollBarInner","imgAlt","imgSrc","maxHeight","marginTop","marginLeft","sidenavOpen","rtlActive","navigator","platform","Component","defaultProps","propTypes","func","bool","arrayOf","object","shape","innerLink","string","outterLink","isRequired"],"mappings":"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","sourcesContent":["/*!\r\n\r\n=========================================================\r\n* Argon Dashboard PRO React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-pro-react\r\n* Copyright 2020 Creative Tim (https://www.creative-tim.com)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\n// react library for routing\r\nimport {NavLink as NavLinkRRD, Link} from \"react-router-dom\";\r\n// nodejs library that concatenates classes\r\nimport classnames from \"classnames\";\r\n// nodejs library to set properties for components\r\nimport {PropTypes} from \"prop-types\";\r\nimport galleta from \"js-cookie\"\r\nimport AuthHelper from \"../../helpers/AuthHelper\";\r\n// react library that creates nice scrollbar on windows devices\r\nimport PerfectScrollbar from \"react-perfect-scrollbar\";\r\n// reactstrap components\r\nimport {\r\n    Collapse,\r\n    NavbarBrand,\r\n    Navbar,\r\n    NavItem,\r\n    NavLink,\r\n    Nav\r\n} from \"reactstrap\";\r\n\r\nclass Sidebar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            collapseOpen: false,\r\n            ...this.getCollapseStates(props.routes)\r\n        };\r\n    }\r\n\r\n    // verifies if routeName is the one active (in browser input)\r\n    activeRoute = routeName => {\r\n        return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n    };\r\n    // makes the sidenav normal on hover (actually when mouse enters on it)\r\n    onMouseEnterSidenav = () => {\r\n        if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\r\n            document.body.classList.add(\"g-sidenav-show\");\r\n        }\r\n    };\r\n    // makes the sidenav mini on hover (actually when mouse leaves from it)\r\n    onMouseLeaveSidenav = () => {\r\n        if (!document.body.classList.contains(\"g-sidenav-pinned\")) {\r\n            document.body.classList.remove(\"g-sidenav-show\");\r\n        }\r\n    };\r\n    // toggles collapse between opened and closed (true/false)\r\n    toggleCollapse = () => {\r\n        this.setState({\r\n            collapseOpen: !this.state.collapseOpen\r\n        });\r\n    };\r\n    // closes the collapse\r\n    closeCollapse = () => {\r\n        this.setState({\r\n            collapseOpen: false\r\n        });\r\n    };\r\n    // this creates the intial state of this component based on the collapse routes\r\n    // that it gets through this.props.routes\r\n    getCollapseStates = routes => {\r\n        let initialState = {};\r\n        routes.map((prop, key) => {\r\n            if (prop.collapse) {\r\n                initialState = {\r\n                    [prop.state]: this.getCollapseInitialState(prop.views),\r\n                    ...this.getCollapseStates(prop.views),\r\n                    ...initialState\r\n                };\r\n            }\r\n            return null;\r\n        });\r\n        return initialState;\r\n    };\r\n    // this verifies if any of the collapses should be default opened on a rerender of this component\r\n    // for example, on the refresh of the page,\r\n    // while on the src/views/forms/RegularForms.js - route /admin/regular-forms\r\n    getCollapseInitialState(routes) {\r\n        for (let i = 0; i < routes.length; i++) {\r\n            if (routes[i].collapse && this.getCollapseInitialState(routes[i].views)) {\r\n                return true;\r\n            } else if (window.location.href.indexOf(routes[i].path) !== -1) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // this is used on mobile devices, when a user navigates\r\n    // the sidebar will autoclose\r\n    closeSidenav = () => {\r\n        if (window.innerWidth < 1200) {\r\n            this.props.toggleSidenav();\r\n        }\r\n    };\r\n    // this function creates the links and collapses that appear in the sidebar (left menu)\r\n    createLinks = routes => {\r\n        return routes.map((prop, key) => {\r\n\r\n            if (prop.redirect) {\r\n                return null;\r\n            }\r\n            if (prop.collapse) {\r\n                if (prop.isAdmin && AuthHelper.isAuthenticated() && galleta.getJSON('user').result.user_type_id === 3) {\r\n\r\n                }\r\n                var st = {};\r\n                st[prop[\"state\"]] = !this.state[prop.state];\r\n                return (\r\n                    <NavItem key={key}>\r\n                        <NavLink\r\n                            href=\"#pablo\"\r\n                            data-toggle=\"collapse\"\r\n                            aria-expanded={this.state[prop.state]}\r\n                            className={classnames({\r\n                                active: this.getCollapseInitialState(prop.views)\r\n                            })}\r\n                            onClick={e => {\r\n                                e.preventDefault();\r\n                                this.setState(st);\r\n                            }}\r\n                        >\r\n                            {prop.icon ? (\r\n                                <>\r\n                                    <i className={prop.icon}/>\r\n                                    <span className=\"nav-link-text\">{prop.name}</span>\r\n                                </>\r\n                            ) : prop.miniName ? (\r\n                                <>\r\n                                    <span className=\"sidenav-mini-icon\"> {prop.miniName} </span>\r\n                                    <span className=\"sidenav-normal\"> {prop.name} </span>\r\n                                </>\r\n                            ) : null}\r\n                        </NavLink>\r\n                        <Collapse isOpen={this.state[prop.state]}>\r\n                            <Nav className=\"nav-sm flex-column\">\r\n                                {this.createLinks(prop.views)}\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </NavItem>\r\n                );\r\n            }\r\n            return (\r\n                <NavItem\r\n                    className={this.activeRoute(prop.layout + prop.path)}\r\n                    key={key}\r\n                >\r\n                    <NavLink\r\n                        to={prop.layout + prop.path}\r\n                        activeClassName=\"\"\r\n                        onClick={this.closeSidenav}\r\n                        tag={NavLinkRRD}\r\n                    >\r\n                        {prop.icon !== undefined ? (\r\n                            <>\r\n                                <i className={prop.icon}/>\r\n                                <span className=\"nav-link-text\">{prop.name}</span>\r\n                            </>\r\n                        ) : prop.miniName !== undefined ? (\r\n                            <>\r\n                                <span className=\"sidenav-mini-icon\"> {prop.miniName} </span>\r\n                                <span className=\"sidenav-normal\"> {prop.name} </span>\r\n                            </>\r\n                        ) : (\r\n                            prop.name\r\n                        )}\r\n                    </NavLink>\r\n                </NavItem>\r\n            );\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const {routes, logo} = this.props;\r\n        const scrollBarInner = (\r\n            <div className=\"scrollbar-inner\">\r\n                <div className=\"sidenav-header d-flex align-items-center\">\r\n                    {logo ? (\r\n                        <NavbarBrand>\r\n                            <img\r\n                                alt={logo.imgAlt}\r\n                                className=\"navbar-brand-img\"\r\n                                src={logo.imgSrc}\r\n                                style={{maxHeight: \"7rem\", marginTop: \"2rem\", marginLeft: \"1rem\"}}\r\n                            />\r\n                        </NavbarBrand>\r\n                    ) : null}\r\n                    <div className=\"ml-auto\">\r\n                        <div\r\n                            className={classnames(\"sidenav-toggler d-none d-xl-block\", {\r\n                                active: this.props.sidenavOpen\r\n                            })}\r\n                            onClick={this.props.toggleSidenav}\r\n                        >\r\n                            <div className=\"sidenav-toggler-inner\">\r\n                                <i className=\"sidenav-toggler-line\"/>\r\n                                <i className=\"sidenav-toggler-line\"/>\r\n                                <i className=\"sidenav-toggler-line\"/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"navbar-inner\">\r\n                    <Collapse navbar isOpen={true}>\r\n                        <Nav navbar>{this.createLinks(routes)}</Nav>\r\n                    </Collapse>\r\n                </div>\r\n            </div>\r\n        );\r\n        return (\r\n            <Navbar\r\n                className={\r\n                    \"sidenav navbar-vertical navbar-expand-xs navbar-light bg-white \" +\r\n                    (this.props.rtlActive ? \"\" : \"fixed-left\")\r\n                }\r\n                onMouseEnter={this.onMouseEnterSidenav}\r\n                onMouseLeave={this.onMouseLeaveSidenav}\r\n            >\r\n                {navigator.platform.indexOf(\"Win\") > -1 ? (\r\n                    <PerfectScrollbar>{scrollBarInner}</PerfectScrollbar>\r\n                ) : (\r\n                    scrollBarInner\r\n                )}\r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n    routes: [{}],\r\n    toggleSidenav: () => {\r\n    },\r\n    sidenavOpen: false,\r\n    rtlActive: false\r\n};\r\n\r\nSidebar.propTypes = {\r\n    // function used to make sidenav mini or normal\r\n    toggleSidenav: PropTypes.func,\r\n    // prop to know if the sidenav is mini or normal\r\n    sidenavOpen: PropTypes.bool,\r\n    // links that will be displayed inside the component\r\n    routes: PropTypes.arrayOf(PropTypes.object),\r\n    // logo\r\n    logo: PropTypes.shape({\r\n        // innerLink is for links that will direct the user within the app\r\n        // it will be rendered as <Link to=\"...\">...</Link> tag\r\n        innerLink: PropTypes.string,\r\n        // outterLink is for links that will direct the user outside the app\r\n        // it will be rendered as simple <a href=\"...\">...</a> tag\r\n        outterLink: PropTypes.string,\r\n        // the image src of the logo\r\n        imgSrc: PropTypes.string.isRequired,\r\n        // the alt for the img\r\n        imgAlt: PropTypes.string.isRequired\r\n    }),\r\n    // rtl active, this will make the sidebar to stay on the right side\r\n    rtlActive: PropTypes.bool\r\n};\r\n\r\nexport default Sidebar;\r\n"]},"metadata":{},"sourceType":"module"}